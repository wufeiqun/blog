# 该文件基于RockyLinux OpenResty修改, 默认的目录为/usr/local/openresty/nginx

# nginx主进程启动用户, 默认为nobody
user  root;
# nginx进程数, 一般跟CPU核数相同, auto的话会自动探测
worker_processes  auto;
# 全局错误日志, 默认为error级别, 这里设置为notice, 这样错误日志详细一些
error_log  logs/error.log  notice;
# nginx pid文件目录, 这个很重要, 不要随便动, systemctl启动的时候会使用这个文件
pid    logs/nginx.pid;
# 一个worker进程打开的最大文件数量
worker_rlimit_nofile 65535;

# events模块中包含nginx中所有处理连接的设置
events {
    # 一个worker进程允许的最大同时连接数量
    worker_connections  65535;
    # 告诉nginx进程一次性处理所有监听队列中的请求而不是一个一个处理
    multi_accept on;
    # 不用明确指定, nginx会选择最高效的方式
    #use epoll;
}


http {
    #---------------------------通用配置---------------------
    # 兼顾 大文件吞吐 和 小包低延迟
    sendfile        on;
    tcp_nopush     on;
    tcp_nodelay    on;
    # 客户端必须在指定时间内上传完HTTP请求头, 否则返回408超时, 正常请求都会很快
    # 有些恶意攻击的会拖垮worker
    # 默认60秒
    client_header_timeout 30s;
    # 这个不是指在指定时间内必须传完, 而是上传过程中这么长时间没有继续收到数据后会返回超时
    # 跟上面的类似, 都是为了应对恶意攻击
    client_body_timeout   30s;
    # 当客户端连接超时（比如 client_header_timeout 或 client_body_timeout 到期）时:
    # off：Nginx 会优雅地关闭连接（正常四次挥手）。
    # on：Nginx 会直接向客户端发送 RST (reset) 包，立刻强制中断连接。
    # 1. 防御慢连接攻击, 攻击者故意维持大量半开连接，拖延请求发送，消耗 Nginx 资源
    # 开启 reset_timedout_connection on; 后，这类超时连接会被立刻重置，释放文件描述符和内存。
    # 2. 减少 TIME_WAIT 状态的连接, 如果用正常关闭，服务端可能会留下大量TIME_WAIT连接，占用资源, 用RST关闭，连接不会进入TIME_WAIT，而是立即释放。
    reset_timedout_connection on;
    # 域名表大小, 默认配置在域名过长或者过多的时候容易报错
    # 像是一个大书架有多少格子。整个 hash 表的总容量（能放多少域名）。
    server_names_hash_max_size 1024;
    # 像是每个格子能放多厚的书。每个桶的大小（能放多长的域名）。
    server_names_hash_bucket_size  128;
    # 字符编码, adds the specified charset to the “Content-Type” response header field.
    charset UTF-8;
    # 每个请求最多1个Range（够用，又能防御攻击）, 比如Range: bytes=0-99
    # 恶意客户端可能发送大量 Range 请求（比如成百上千个区间），导致 NGINX 频繁切片读取文件，严重消耗 CPU 和 IO。
    max_ranges 1;

    #---------------------------MIME-------------------------
    include       mime.types;
    # 根据文件后缀去mime.types匹配, 没有命中的话就走默认类型
    # 下面的默认值为ensure that files with unknown extensions are treated as generic binary data, 
    # often prompting web browsers to download them rather than attempting to display them inline.
    default_type  application/octet-stream;

    #---------------------------LOGGING----------------------
    # access log格式, 格式名字为main. 各个变量的含义参考https://nginx.org/en/docs/http/ngx_http_upstream_module.html#variables
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
     '$status $body_bytes_sent "$http_referer" '
     '"$http_user_agent" "$http_x_forwarded_for" '
     '$connection $upstream_addr '
     '$upstream_status '
     '$upstream_response_time $request_time '
     '$upstream_http_host $request_body "$http_cookie"';
    # 全局默认access log配置
    access_log  logs/access.log  main;

    #---------------------------SECURITY-----------------------
    # 隐藏nginx版本号, 安全
    server_tokens off;
    #---------------------------CLIENT CONFIG------------------
    # NGINX和客户端之间一般会放置一个SLB, SLB上会配置单个链接的最长超时时间, 所以NGINX与客户端连接的超时时间不用配置了

    # Nginx读取客户端header或者请求URL的时候会分配buffer, 小于该配置项的大小的时候会分配该配置项大小的buffer
    # 大于该配置项大小的时候large_client_header_buffers配置项会生效, 一般的都小于1K, 除非有些cookie配置的特别多等
    client_header_buffer_size 4k;
    # 大于client_header_buffer_size的header走下面的逻辑, 最大不超过 num*size
    large_client_header_buffers 4 16k;
    # 客户端请求的body的最大size, 一般上传文件会用到该配置
    client_max_body_size 1g;
    # 客户端请求body小于这个直接放内存, 大于这个会放到一个temp文件夹
    client_body_buffer_size 1m;
    #---------------------------PROXY CONFIG------------------
    # 是否开启proxy忽略客户端中断。即如果此项设置为on开启，
    # 则服务器会忽略客户端中断，一直等着代理服务执行返回。
    # 并且如果执行没有发生错误，记录的日志是200日志。
    # 如果超时则会记录504。如果设置为off，则客户端中断后服务器端nginx立即记录499日志
    proxy_ignore_client_abort on;
    proxy_headers_hash_max_size 51200;
    proxy_headers_hash_bucket_size 6400;
    # proxy buffer相关配置
    # 它控制 NGINX 是否对后端响应进行缓冲。
    # 开启缓冲（proxy_buffering on）：先把后端服务器响应缓存在 NGINX 内存/磁盘中，再统一发送给客户端
    # 关闭缓冲（proxy_buffering off）：后端响应数据 边接收边转发 给客户端
    #  实时视频、WebSocket、事件流 等场景适合关闭
    #
    # 场景：客户端请求一个 100KB 的大文件
    # •	NGINX 流程：
    # 1.	缓冲区缓存响应头：8KB（proxy_buffer_size）
	# 2.	缓冲区缓存响应体：16KB * 4 = 64KB
	# 3.	剩余数据写入临时文件：100KB - 64KB = 36KB
	# •	每次写入 16KB（proxy_temp_file_write_size）
	# •	第一次写入 16KB，第二次写入 16KB，最后剩余 4KB 也会写入
    proxy_buffering on;
    proxy_buffer_size 128k;
    proxy_buffers 16 128k;
    proxy_busy_buffers_size 256k;
    # 开启后默认会把后端返回的数据先缓存在内存, 如果超过缓存设置的size大小, 就会存储到文件了
    # 表示每次向临时文件写 128KB 数据。控制磁盘写入性能，减少频繁小写操作
    proxy_temp_file_write_size 128k;
    # 临时文件的最大允许大小, 防止客户端请求大文件时占满磁盘
    proxy_max_temp_file_size 1024m;
    # nginx向后端接口转发的时候, 在没有返回给客户端之前, 如果遇到问题就会向下一个节点继续请求, 这里定义了详细的问题
    # 默认情况下, nginx遇到网络不通/后端服务关闭/请求超时的时候会向下一个节点请求
    # 可以配置其它的HTTP错误代码, 比如http_500, http_404等
    # 默认情况下POST等请求异常不会向下一个发送请求, 如果想让这种情况向下一个请求, 可以配置non_idempotent 
    proxy_next_upstream error timeout invalid_header  http_500 http_502;

    #---------------------------LIMIT CONFIG------------------
    # 限制连接数配置, 表示一个客户端IP地址同时最多存在500个连接, 暂时关闭, 后续有需要可以开启
    #limit_conn_zone $binary_remote_addr zone=globalConnZone:10m;
    #limit_conn globalConnZone 500;
    #limit_conn_log_level notice;
    # 限制访问频率配置, 每秒最多处理单个IP的100个请求, 多余的排队, 暂时关闭, 后续有需要可以开启
    #limit_req_zone $binary_remote_addr zone=globalLimitZone:10m  rate=100r/s;
    #limit_req  zone=globalLimitZone;
    #limit_req_log_level notice;

    # 文件缓存（open_file_cache)相关配置，用于提高静态文件访问性能，减少每次访问都打开文件和检查文件状态的开销。
    # 开启 文件缓存，缓存已经打开的文件描述符和文件信息（inode、大小、修改时间等）
    # 最多缓存 65535 个文件, 缓存条目 60 秒未被访问就失效
    open_file_cache max=65535 inactive=60s;
    # 多长时间检测一次, NGINX 每 80 秒检查一次缓存条目的有效性（比如文件是否被修改）
    open_file_cache_valid 80s;
    # 记录查询cache的错误, 避免频繁访问不存在文件导致开销
    open_file_cache_errors on;


    #---------------------------GZIP--------------------------
    gzip  on;
    # 据客户端请求头 Accept-Encoding 判断是否支持Gzip, 浏览器支持gzip时才压缩响应
    gzip_vary on;
    # 压缩等级范围1-9, 1: 压缩速度快, 压缩比低; 9: 压缩比高, 但消耗CPU多, 推荐4-6, 兼顾性能和压缩率
    gzip_comp_level 2;
    # 小于1k字节的响应不压缩, 避免压缩小文件反而增大开销
    gzip_min_length 1k;
    gzip_types text/plain text/css text/xml application/javascript application/json application/xml application/xml+rss text/javascript;


    #---------------------------SSL通用配置-----------------------
    # 这一部分参考火狐的推荐配置
    # 会话缓存, 避免重复握手, 减少CPU消耗
    # shared: 共享缓存(所有worker进程共享), SSL: 缓存名字, 100m: 缓存大小100MB, one megabyte can store about 4000 sessions
    ssl_session_cache      shared:SSL:200m;
    # 缓存的超时时间
    ssl_session_timeout    1d;
    ssl_session_tickets    off;

    # 具体的每个域名的配置都放到各个域名的文件中
    include /usr/local/openresty/nginx/conf/conf.d/*.conf;

}
